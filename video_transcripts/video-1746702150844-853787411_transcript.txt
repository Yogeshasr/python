Hey what's up guys welcome back to our YouTube channel and welcome to this video. This is John from Programming Knowledge and in this video guys we're gonna talk about the scope of a variable. And of course we're going to talk about the operators in C and how we can use them. So let's go ahead and talk about the scope of a variable. So basically a scope is a region of the program and the scope of variable reference to the area of the program where the variables can be accessed after its declaration. So basically in the C program we have like three different scope or different location that we can declare our variables. So the first one is inside the function or a block. So we have the first one will be the local variable. Here we go. We can declare a variable inside our function. The second one will be the global variable. Okay and of course we can also declare a variable inside the function parameter. So function parameters. Okay so that's all the area that we can like declare the variables and set the values to it. So but basically we do have like only the two that is most common although we are most of the time setting the function parameters and declaring variables to it like almost every function. But yeah the most common way of you know declaring a variable is the local and global local and global variable. So again when we say global or local variable it is a a variable that is declared inside a particular function or a block of function. So a variables that are declared within the function block and can be used only within the function is called local variable. So this is how we can implement this in our C program. So for example in here we're going to declare. But anyway guys this is a comment and the way to make comment in C program is by using the double slash. So this means this is a single line comment and of course we do have the slash and then the asteris and then asteris and then forward slash. So this is multi-line comment. So we can like add comments in between these lines and this double slash will be the single line comment. Okay so I hope you get the idea of this comments and basically guys these comments will not be interpreted by our C program. Okay so as I've said we're going to discuss or we're going to declare a local variable here. Local variable definition and initialization. Initialization right there. I'm just going to remove this single line comment. Okay so the way to declare a variable in C is like in or this is the type of information that we want to save. So in and then for example the variable name is x and we can do it like this y and then z. So basically what we're doing here is declaring three variables of in type. Okay so this is the variable definition and of course we can initialize it by saying x equals to 10. Okay x equals to 10 and y equals x plus 5 and then we can also say z equals y y variable plus 1. Okay so that's how we can declare a variable and initialize the value into the variable. So this is the definition in x, y, z and then of course the actual initialization which is right here x equals to 10 y equals x plus 5 and then z equals y plus 1. Okay so of course you can always print this. So for example print, print f and then value of, as a for example, z equals percent d. Remember percent d is just the placeholder for our integer value. So the value of z equals the c variable. Okay and then save and of course you can compile and or build and run your c program. So let's try that. Okay so we need to add the same column at the end of the line to mark that it is ending in this particular line. So build and run and there you go the value of z equals 16 because we set the x equals to 10 and then dy equals to x plus 5 and of course z equals y plus 1 that will result to 16. Okay so that's how you declare and initialize a local variable. Now let's go on with the global variable or global scope of a variable. So variables that are declared outside of the function can and can be access inside the function is called global variables. So for example you want to declare a global variable all you have to do is before the main function. Okay right here we can declare the global variable. Okay and we can declare it like int age and then we have like the c me colon at the end of the declaration. Okay in age and then c me colon. So global variable initialization. So after the after defining a local variable the system or the compiler won't initialize the value or any value to our local variable. So we have to initialize it by by ourselves like this. So if you try to define the variables right here it won't have any initial or initial value. So we have to declare it like this x equals to 10 y equals x plus 5 z equals y plus 1 but global variables get initialized automatically by the computer or by the compiler and so for example if we declare the variable type as int then the initial default value will be 0. Okay remember you have to remember that. So the difference between global and local variable is whenever we declare the variable in our local scope it won't get any initial value. So we have to initialize it by ourselves but the global variable is initialized by default depending on the type of value that we have saved in our variables. So for example int then it will default or initial default value will be 0 and if char so for example char t so the default value will be single code and then box slash 0 and then box slash I'm in single code. Of course when we say float, float m so the initial value of that is equal to 0 when we say double the initial value of that is also 0 and when we say pointer the initial value of this is equal to null. Okay so you have to remember that whenever you declare a global variable there is a default value for our variables. Okay so as I've said global variables can be accessed inside our main function or any function so because this is a global variable, right? Okay so I think that's all there is to it for this video guys and if you want to learn more about C programming language so make sure to watch the next video and that's it. Thank you for watching and see you in the next video.