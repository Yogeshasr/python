ðŸ“Œ Position 0 - video-1746358369890-90335503.mp4
In the video about components, I mentioned that components are reusable. So you can create a component that returns any JSX you want to and include it in any part of your application. For example, let's say we need to reuse the grid component. All you have to do is include the grid tag as many times as you want. If I duplicate it twice, save the file and take a look at the browser, you can see Hello Vishwas displayed three times. Now this isn't really helpful, is it? What would be great is if you could pass in the name of the person we wanted to grid. That way, reusing the same component, we could grid three different people instead of greeting Vishwas three times. That is where props comes into picture. Props short for properties is the optional input that your component can accept. It also loves the component to be dynamic. Let's understand how props work in this video. Our intention here is to pass a name from app component to the grid component and render that name in the browser. To specify props for a component, we specify them as attributes. To specify a name property, we simply add the name attribute. To the attribute, we assign the value. Let's go with the name Bruce. Similarly, let's add the attribute on the other two components as well. Name is equal to Clark and name is equal to Diana. Okay, so now we are sending some information or some property to the grid component. But how do we retrieve these values in the grid component? That is a quick two step process. The first step, add a parameter to the functional component. You are going to call it props. You can actually name this anything you want to, but the convention is to name it props. And I highly recommend you don't deviate from this. The second step is to use this parameter in the function body. Now in the function body, let me first log the props parameter in the console. The function body is going to take up more than one line, so we need curly braces and also the return statement. Console.log props and then we return the H1 element. Again, the necessity of curly braces and the return keyword is an ES6 arrow function concept. If you are struggling to understand, please read up on arrow functions and then continue. Alright, so if you go back to the browser and open DevTools, you can see that there is an object logged in the console. If I expand, you can see that the object has a property called name and a value of Bruce. Similarly, we have Clark and Diana. Three objects corresponding to the three components. So props is just an object that contains the attributes and their values, which have been passed from the parent component. So if we want to display the name that has been passed to the greet component, we need to use props.name. So back in VS Code, instead of Vishwas, we need to use props.name. If we save the file and take a look at the browser, the output is not quite what we want it to be. And that is because it is being treated as text. We need to instead ask React to evaluate the JSX expression. And we do that by wrapping the expression with curly braces. The curly braces is a feature of JSX, which is really helpful and is used a lot in react applications. If we now take a look at the browser, you should be able to see hello Bruce, hello Clark, and hello Diana. The reusability of components makes much more sense now that we understand props. Each component can have an HTML template and we can pass in the data we want the component to use. Now let's add another prop to make sure we get a good understanding of how it works. I'm going to add a second attribute. I'm going to call this hero name. For Bruce, the value is going to be Batman. For Clark, it is going to be Superman. And for Diana, we are going to have Wonder Woman. Now in the greet component, I'm going to modify the h1 tag to hello props.name aka or also known as within curly braces props dot hero name. Now if we take a look at the browser, you can see that the output is what we expected to be. Sometimes it is also possible that you might not have an idea as to what content is being passed in. But we want the component to render that unknown content. We can do that by specifying the content between the opening and closing tag of the component and retrieving it using the reserved children property in the props object. Let's understand better with an example. On the first greet component, instead of the self-closing tag, I will split it into opening and closing tags. In between the tags, I will specify a simple paragraph tag. This is children props. Now in the greet component, we can render that paragraph using props dot children. So first, I'm going to be adding parentheses as I will be splitting the JSX into multiple lines. The first line is the h1 tag and then within curly braces, I will add props dot children. If I save the file and take a look at the browser, you can see that we have an error. This is because the JSX we have should contain only one wrapper element. So back in VS code, we are going to wrap both these elements within a div tag. So this is a limitation we currently have. We can return only one HTML element. So we have to enclose all our content in one div wrapper tag. If we now save the file and take a look at the browser, you can see that only for backman, we have the additional content being rendered. This paragraph corresponds to the inner HTML of the greet component. This right here. So if I were to add a button tag to the second greet component, and take a look at the browser, the button should be rendered for Superman. So for the properties you know for sure are going to be passed, you can pass them as attributes. If you have no clue what is going to be passed as props, or if you have to pass in dynamic HTML content, pass it in between the component tags and in the component definition, simply render the content using props dot children. If at all something is specified, it is rendered in the browser. And if nothing is passed, props dot children simply renders nothing. Next let's see how to make use of props with a class component. Now irrespective of the component type, the properties are mentioned as attributes during the component invocation. So we have our welcome component, which is a class component, and I'm going to duplicate it twice. Next I'm going to add the exact same attributes. In the first welcome component name Bruce and hero name Batman. Similarly Clark and Diana. Now in the welcome component, let's use these values. Unlike the functional component, where we specify the props parameter, in a class component, the properties are available through this dot props, which is reserved in class components. So in the HTML, we can have welcome this dot props dot name, also known as this dot props dot hero name. Basically you're accessing the props with this keyword. If you save the files and take a look at the browser now, you should see the expected output. Welcome Bruce Clark and Diana. So that is pretty much the basic idea behind props. When specifying the component, you can include additional attributes. React is going to bundle all such attributes into an object, which we by convention call as props. In the component definition, we can access any attribute we want to and render dynamic content. Now there is one strict rule though when it comes to props and that is props are immutable or in simpler words, their value cannot be changed. In our example, if I try to assign a value to props dot name, for example, is equal to wish was save and take a look at the browser. You can see that the application breaks cannot assign to read only property name of object. React components have to act like pure functions with respect to their props parameter. You cannot change it under any circumstance. Nevertheless props is a great feature in react and any practical react application will definitely make use of props. Now you might have a question if props are immutable, how do we maintain component data that might change over time? Let's discuss the answer to that in the next video. Thank you guys for watching. Don't forget to subscribe and I'll see you guys in the next one.
----------------------------------------

