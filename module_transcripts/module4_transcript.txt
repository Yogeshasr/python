ðŸ“Œ Position 0 - video-1746095062785-498720290.mp4
So, in the series of running C++ programming language in the previous video we have discussed history of C++. In this video we will talk about a basic structure of a C++ program right. So before writing you actually writing the program you should have basic idea about the structure of a C++ program and it is almost same as the structure of a C program right. That is where you can check out in the side button right and these are the sections in which you know which basic structure of a C++ program can have. But these sections are not compulsory all these sections only two sections or three sections are compulsory to include in your program. All other sections are optional. So what are optional sections what are compulsory sections we will discuss in detail in this video with the help of a program as well. I will show you the program on my laptop which will include all these sections right. So I will show you practical also. So these are some sections as C++ program can have and a lot of discussion detail those sections which are same as in structure of a C program because I think better not to waste time on those sections explaining again. In that video I have explained these sections in detail. So you can check out that video that I have put in the side button right or you can check out in the description box I will put the complete playlist link C complete playlist. You can go to that playlist and you can check out the video. At the starting I think third or fourth video is about structure of a C program. So you go to that video first then come to this video. So now the first section is documentation section. In this section same as this C program also have this section. Here we generally include the information about that program like author who is the author of that program, the date of return of that program and what this program is all about. Only by seeing the documentation section one can identify this program is all about what. If I have written a program like author is Jenny date is this and this program is you know program to add two numbers. So if you will see that program by not you will not see the program actual program you just see the documentation section and you will know who is your author of this program the date of return of this program and what this program is all about. So it will increase the readability and maintainability right. So it is completely optional you do not need to include this section it is not compulsory and here we write the information in the comment box single line comment and this is multiple line comment. This is single line comment here we can multiple lines and the last of this line you can include this this is multiple line comment all these the lines will write these comment after these comments that would not be considered by the compiler as line of code that would not be compiled that would not be converted into object code right that would completely be completely omitted by the compiler right. So now the next section is link section. So here we have two parts in C++ program header and name space. So here in C we have like we know header file hash include a studio. Right here also previous in previous version of C we include something like this I use stream we use to include I use stream do not edge this thing hash include we call it as a header file it contains the you know you can say the declaration or the prototype of all the built-in functions and the constant and some objects everything prototype of those built-in things right. So header files or you can say now we now modern compiler support what I use stream the known do not edge version we do not write do not edge now we generally wrote these things before C++ vote standardized right. Modern compilers do not support these things these files do not edge files after C++ vote standardized right. The concept of name spaces comes and everything they group into name spaces right name space means it is you can say just a container container for identifiers. Identifier means just a name of any function or object or any constant these things are identifiers. So name space is just a container or you can say group of elements objects classes functions in name spaces we have definition of these things declaration of these things object classes function constant these things right. So after C++ vote standardized we use this thing only this is known as header not header file we call it as a simply header Iostream header and in this header we have 8 stream object declaration of 8 stream objects as well as I stream objects O stream objects that are also there in this Iostream input output stream right. So the object we will see in C out for error C C E wlR we use A and DL we use all these objects are declared in this header in this header but under a name space name STD right. I will show you this header on my laptop what is there in this header in this header it just we there is a code then we a code in this header and a come it is like a name space it is like you can say it is a group STD name space and here we have these things whatever we use like the object C in say out and all these things. So after C++ vote standardized they group these things under name spaces and why name spaces to resolve or to you know resolve the name conflicts now what is this name conflict see. So I guess this is clear why we include these header right. Generally in a program you know we use some built in functions or classes or objects or constant right C in say out these are considered as object these are built in those functions or classes these are defined in libraries files. So to include these things in your program we you have to give a appropriate header right according to your requirement. So if you want to use input output related things the objects or functions you use which header Iostream right. So that is why you need to include these headers right and before this is not a standard header now right only turbo C++ compiler I think support this thing but VS code do not support this in modern compiler do not support this dot h version they support without you know known dot h version. See before these see out see in these were defined in Iostream dot h but after C++ vote standardize these things see in see out and many other things were moved into a namespace named STD and this known dot h version these are considered as standard header standard version standard header right. So that is why nowadays we include this thing not dot h. So now under this obviously everything is grouped in namespaces one namespaces standard namespaces that is STD there we have all these C in see out and D in these these objects the tradition of these objects stream objects right that is why generally we write on the program using namespace STD. So that is part of links section here we use this headers and appropriate namespace right. So in links section we have these headers I think this is clear to you and another thing we have namespaces namespace I think this is clear to you and why we need this namespace like don't worry in detail I will put a video about namespaces right. If we I will discuss more in namespace and this video will be about namespaces not a structure of a C program I will give you general basic idea a brief idea of the headers and namespaces. So I have told you namespaces are used to resolve the name conflict same as like two child have same name like maybe Rahul no no I will not take Rahul one comment I wrote like one student named Aniket he said I am every time you take Rahul next time take my name okay consider Aniket is a student Aniket is a student in one class in computer science also Aniket is student in EC also in CS and EC. So Aniket is there right. Now when I call Aniket who will respond this or this both are standing you can say here only so who will respond I do not know because there is ambiguity right. If I say Aniket from CS then he will respond to me Aniket from EC then he will respond to me. So by calling Aniket from CS the this will resolve the conflict there is no conflict now though no name conflict same happens in the case of programming right. Now this will be considered you can say as a namespace so we are identifying two same things by namespaces if no namespaces there this will create conflict ambiguity in your program right. So same suppose we know that we do not we cannot have in the same program two functions or two objects of same name two classes of same name right. But you can have same name if you resolve the conflict by using namespace concept right that I have told you in real life you can take one example like this right. Suppose in two library files we have same function named any function name you can say suppose sort or print any function and you are you are included you have included both the header files in your program right. Now whenever you call in your program suppose we have a function named sort this function sort. So this is in this header file and so this header file also then compiler is going to get confused like which function to call from this or from this. So to you know what to resolve this ambiguity we use the concept of namespaces they introduce to the concept of namespaces in programming language right. So that same name of any function object or classes can be used right because namespaces different so if name is same then there would be no conflict like this. If I have and you can create your own own namespace also how to create just write down this keyword namespace and the name of your namespace. Suppose I am taking ns1 namespace1 just calibresses and here suppose word sort and just coding of this thing. Another namespace is there namespace n is 2 here also we have word sort and definition of this and that is it no semicolon of the namespace right. So now whenever you call this sort SORT it will you know confuse the compiler which function to be called. So to resolve this thing we write what yeah obviously this is this in this namespace so you write before this thing you write the name of the namespace ns1 and scope resolution operator and if you write ns2 scope resolution operator and the function name sort now that is fine. This line will call this function this line will call this function or the name is same but no conflict is there you have properly identified these by the name of their namespaces n is 1 ns2 scope resolution that is why programs generally we use in using namespace std or maybe you you have written like std this layout this kind of thing or std this scope resolution operator C in. So name space is just provide scope the scope of this is within this namespace the scope of this function is within this namespace right that is why it is known as Rune scope resolution so this function scope of this is within this namespace the scope of this function is in this namespace right. I hope now basic idea about namespaces clear to you what is namespace and why we use this thing to resolve name conflict basically right. So in detail we will see the namespaces concept in a separate video so in link section we have headers and namespaces so that is all about this links section the definition section we have macro definition like hash define these kind of things you can take this is same as in C global declaration also globally if you want to declare any variable you can write down in suppose in your program you have 5 4 10 functions and all these functions are using 2 variable a and b so rather than declaring these 2 variables again and again in 10 functions right same variable a b you just declare those variable as globally so all the functions can use those variables globally right. And after that see this section is optional links section this is compulsory you have to include this in your program definition this is also compulsory sorry optional definition global declaration this is also optional if you do not want to use any global variable it is up for you so this is also optional class this is also optional without using class also you can write down a program simply that I have discussed simply print hello world nothing you have to include just header are you stream using namespace std although it is a bad practice to include using namespace std why so that also discuss in a separate video after that just main function then see out hello world that is it no class is there so this is also optional main function this is compulsory so these 2 are compulsory to include in your program all others are optional according to your requirement you need to are now in class we if you want to create any class just class outright class your class name suppose I am writing my class so first we should be capital and then every world would be separated by capital letters like my after next word is class so C would be capital otherwise all the letters would be then small right. So my class and how to define this thing here you can write down data members and your member function data members means the variables suppose I want to take to int a one variable only right and member function is there I want to use word display so here only you will define this thing like see out and hello that is it right. So you will or you need to specify here specify private protected or public means everybody can use these things the variable and the function. So here we have the data members and the member function definition if you do not want to define the function within the class outside the class also you can define but there you have to tell the compiler that this function is from this class so the syntax would be different class names for preservation operator and after that you have to do that thing that also we can discuss. So this is what the next section this is optional class definition in there we have data members and definition of member function that is it. Now comes to main function this is compulsory obviously from where the execution would be started from main function first of all control will go to main function right. So main function is compulsory main also there are two parts like if you want to declare any local variable you can declare those thing and the statement executable statements you can say the declaration part and executable part right that would be main function or any function you want to call that also you will call in main function right you can call in main function in any other function also you can call but in main function also we call generally right. Now for classes if there is any class so object of that class also you will create in that main right using that object we can access the members and functions of that class right have to write down this thing I will show you practical also the main function is also important compulsory. Next is sub program user defined functions if there are any other user defined functions you have taken then after main you generally after main we define those functions right. So after main you will define those your user defined functions there can be many number of user defined functions right. So see documentation link is something different from C program the structure of a C program which is here we have concept of node header files we call it is that header and name spaces but this is same as structure of C program definition is also same global declaration is also same main function is also same and sub program section is also same. So for detail for detailing for detail explanation of these functions you can refer to that video right. If you you know got it from this video then it is fine no need to refer that video right. Now I think let me just show you one example then you will get a clear idea about these sections right. So this is a program right I have already written this program let me just increase the form size first dot CPP. So see this I have written documentation section author Jentikhatri written on 13 May 2020-22 program to demonstrate basic structure of a C++ program. The first line is single line comment and these two lines are within multiple line comments. So this is documentation section right. It will increase the readability and maintainability maintainability of the program like if any other one wants to maintain this program or to you know read this program want to understand this program what this program is all about then by looking at this only here she can get the idea this program is all about what right. Now next is link section. So here we have hash include Iostream this header Iostream wrote as here I I I I I have not included using name space S.D because I have told you this is a bad practice to include why so that also we can discuss rather than including here I am using S.D. like this S.D. name space operation say out S.D. A and D. What are the objects stream objects which are in S.D. name space if you want to use those objects those things those objects in your program then before using those objects you have to specify from which name space these objects are otherwise this see out if you do not write this S.D. call in this S.D. is cooperation and you simply write C out then it will give error right. So here is now see identify C out is undefined this would be considered as a normal in our program we have those functions or objects or anything but in this program we do not have any C out the declaration of C out. So from where we are using this from name space S.D. so now it will not give error right. So I am using this thing rather than using name space S.D. I am not writing that thing. So see what is there in this Iostream I have not included dot H because modern compiler do not support these file now these known dot H. was considered as standard headers right. So you just press control and click on this Iostream. Standard Iostream objects are there in this file see you can do it out this thing and I just want to tell you where is this S.D. name space see name space S.D. they have defined everything they have grouped everything whatever the functions or objects are there in this under this name space. So in this name space S.D. and they are also including O stream and Iostream files also right. So in this S.D. what we have the object see in C out CRR, C log these objects we have basically 8 stream objects the declaration of 8 stream objects right. So using name space S.D. before using these objects in your program you have to tell from which name space these are. Before C++ go to standardize these are defined in Iostream dot H header file. But after that after the standardization process they have put everything in a name space S.D. within that Iostream file a name space is there S.D. under that name space these objects are there. So now you have to tell that the file is Iostream the header is Iostream and the name space is S.D. within that name space these objects are see out seen. So if you want to use those objects you have to include the name space also that is why we generally write using name space S.D. So that is it. I hope you got now the basic idea about this thing. Now hash define this is what? Macro definition pi 3.141 pi right. I have discussed macros in detail in the C playlist videos so you can check out those things. Now this is global declaration. Int R a variable R is equal to 2 and void area a function area the prototype of that function I have given right. So this int R is equal to this is global declaration of this variable R. You can use this R in any function in your program. Now the class class is class my class is there here I have taken only one variable a that is public word display and simply before using see out I am using S.D. Before using a and D. I am using S.D. Because the C and D. L is also in this name space this identify as also in this name space. I am just printing inside class that is it right. Now main function in main function I have created object of this class have to create object name of the class and name of the object m. Now how to access this a and display function using the object. So m name of the object dot a. Now I am assigning the value a 90 and I am just calling m dot display right. Now I am calling a function area also another function is there which is not there in this class separate function I have. So area I am just calling I have not defined this function area function right. Now what I am printing see out hello world from main function and what I am printing m dot a and that is it whatever the value of a and going to print. So how to access using the object and return 0. Return 0 means successfully we have return means 0 would be return to the operating system int means it is expecting integer value. So return 0 means successful termination of the program we are telling the operating system that successfully we have terminated from the program. Now this is a program section right user defined function. So this is definition of user defined function word area float area variable I have taken area is equal to pi r square area of circle I am going to calculate. Now just printing the area that is it right. So here I am writing pi so this is what macro. So I have defined hash defined pi is able to this thing so this pi would be replaced by this value before compilation start right. So now that set these all section we have let me just run this I do not know it will work or not let me just run this and show you the output. Okay what is the output error pi doesn't name a type okay now see the output what you got let me just do this see this is the output inside class first of all it will print inside class then 12.566 area then hello from the main function and then value 90 right that is it. So you can see here first control will go to the main function then m dot display so it will call first of all display in display we have inside class so that it will print then area it will call then it will print area of the circle then it will print hello world from main function then it will print design m dot a values 90. So this is the program which is having all the sections but all the sections are not compulsory you have to include only link and main section right. If you don't want to use again and again this STDC out STD these thing you can simply write down here using namespace STD. Now whatever is there in STD namespace those thing you can use in your program right those would be included here but I don't want to use all the things whatever is there in STD there are many things in STD I want to use only 2 to 3 things see how seen in and E and DL that is it so why to include this STD right but you can include this thing otherwise you can write using STD this and see how that is also fine using STD namespace using STD's copresolution E and DL using STD's copresolution C in that is it right. So I hope the basic idea basic structure of a C++ program is clear to you about namespace I will include a separate video right. So that's it for this video see don't worry about these namespaces and header on these headers also we can upload a separate video if you are confused about this thing you can tell me in command box and on namespace definitely I am going to upload a separate video. So if you don't get these thing namespace and header whatever I have told you in this link section don't worry in that video you will get it better. I hope now you have basic idea about the structure and what are in these sections over view of these briefly you have the idea right. So now I will see you in the next video till then bye bye take care.
----------------------------------------

