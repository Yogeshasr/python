ðŸ“Œ Position 0 - video-1746702101346-893398801.mp4
Hey, what's up guys? Welcome back to our YouTube channel. This is John from Programming Knowledge. And in this tutorial, guys, I want to talk to you guys about variable CNC. Now, when I ask us, so I have an API, country flags API in here, you can get source over the link and we, we it has used the B, it has used the B E. And sometimes it can be difficult to maintain and keep track of all that data. And that's where variables come in. So basically, variable is essentially a container where we can store different pieces of information. So different data values and with their names and email. And also you can see that whenever we type any name, it will filter out the name of and the name. Hi, Hi, Hi, Hi, Hi, Hi, Hi, Hi, Hi, Hi, Hi, guys, guys, in this video, we're going to start building our new, that's called Robo friends. In this, you can see there are some cards in which there are robots and with their names and email. And also you can see that whenever we type any name, it will filter out here's old. He really like the name, Mike, but did not like being 50. So this is a simple program. We're just printing out a bunch of different lines of text. And then when I run this program, you'll see we print out the actual story. So over here, we have the actual story. And this is great. Okay. But let's say that I'm reading through my story and I'm reading through my program. And I'm thinking to myself, hmm, I think I want to change the character's name. So instead of calling the character Mike, why don't we call him like John in order to make that change? So I'm going to have to look through my entire program and find every place where we mentioned the character's name. So right here is one. So change it to John. And remember, keep looking here and there's another one. So we'll change this to John, right? So I had to manually go through and change every instance of the character's name to John. So let's say that's okay. That's that sounds pretty good. But maybe I'm thinking I want to make the character a little bit younger. So instead of like 50 years old. So let's change it to maybe 30, 30 years old instead of 50 years old. Okay. We're going to change the heat here. He was 30 years old and also in here, the last line of our story. So that's 30 instead of 50. If I was to run this program, then all that information will be updated and we'll now have new story. Okay. So here's the problem though. I'm dealing with a very short story. So I mean, this is four lines. We only mentioned the character's age and name only twice. But imagine if I have if I was writing out a huge C program that had hundreds of lines in the story. So story had hundreds of lines and maybe we mentioned a character's name hundreds of times. They're mentioned their age hundreds of times. And if we wanted to change the character's age or name, I would have to go through and manually change it every single location and that would take forever. And it would be a huge job for us to change all the instances of the name of our character and also for our for the age of our character. So basically that's not a good way for us to manage and maintain the data for our programs. Okay. Basically, you have two pieces of data that we're working with and consistently in this program. The character is age and the character's name. What I want to show you guys now is how we can use variables to better keep track. I mean, manage this pieces of information. So remember, a variable is basically just a container where we can store some data. So I want to create two variables, which will store the character's name and the characters age. And I'll show you guys how this can make our program a lot easier to manage up here before the print statement. I'm just going to make a new line and I'm going, I'm going to come over here and I want to create a variable. Now, whenever we create a variable in C, we have to give C a couple of, a couple pieces of information. The first thing we have to tell C is that what type of information we want this variable to store. Now, I'm going to get into the different data types that we can represent and see more in the next tutorial. But for now, just know that there's a bunch of different types of data that we can store and see can see. We can store things like numbers, characters, we can store text, we can store decimal numbers, all sorts of stuff like that. In our case, I'm going to store the character's name and the characters age. Basically, just a collection of characters. So in order to create this variable, the first thing that I have to tell C that I want to create a variable that's going to store some characters. And to do that, I'm just going to type out char here, just like that. And basically telling C, we're going to store characters inside of this variable. So after we type out char, I wanted to type the name of the variable that I want to create. Remember that a variable is a container and it's a good idea for us to give these containers descriptive names. And those names will basically let us know what that variable is in store inside of it. So I'm going to call this character name. Now what I want to do is basically I want to store multiple characters. So over here, we're telling C that I want to store a character, but in C, we can also store instead of just set up just storing like one single character, we can store a bunch of characters. And that would be kind of like, you know, name. So there's like four characters in here. So in order for us to store a bunch of characters inside of this particular variable, after we type the character variable name, we're going to have to make an open and close square brackets. And that's going to tell us he that we want to store a bunch of characters inside of this particular variable. So char character name open and close square brackets. I'm I'm going to set this equal to something. So I'm essentially assigning a value to this particular variable. And I'm just going to make an open close quotation marks. So equals and then quotation marks. And inside of here, we're going to type out the value that we want to store. So in my case, I'm just going to store the character's name, which is John. And then as always in C, we're going to have to end this off with a semi colon. So all right. Basically what I did here was I created a variable. And I told C that I want to store in the variable. I wanted to store a character and I gave this variable a name, character name. And then I use this open and close square brackets to tell C that I wanted to store. A bunch of characters, not just one. Now what we can do is we can make another variable to store the characters age. So in this case, we're going to do something similar, but we're going to want to store a number. And there's a bunch of different ways that we can store numbers in C. But for our purposes, we're starting age. So we're going to use something called an integer. And an integer is basically just a whole number. So I'm just going to type out in here in and that basically stands for integer. And now we're going to give this name. So I'm going to call this character age. And I'm going to set this equal to a number. So in our story, the age is 35. So I'm just going to type out 35 there. And now we can again, and this off with a semicolon. So I have here two variables. This one storing the character name and this one is for our age. Now the question becomes how we can use this inside our program. Well, basically what we can do is we can print them out alongside with, with this text. And we can actually use this print F function in order to do that. So I'm going to show you guys how to do this. And then we're going to talk about it. So basically I'm going to go over here. And as you can see, we have here the character name, which is John. Okay. So we can replace this with percent S. So percent S is basically a placeholder. So after this, we're going to add comma here. And then we're going to add the character name variable. So basically we're telling C that we're going to print this particular text and percent S is just a placeholder that will automatically be replaced by the value of our variable character name. So we have the first instance of the character name. And then right here, we also have, we also need to replace this with percent S. And then add comma and then character name because we want to replace that with our value of our variable character name, which is John. And of course, like here, we also need to replace this with the actual value of our character age. So what we can do here is just we can add percent D. So percent D is also a placeholder for printing the integer. So this is like integer integer character age plus 35. And then percent D. And then we're going to add comma here. So and then character age, the same thing here, character age. And then we're going to replace this with percent D, a placeholder for integers. So if we're trying to run our program. So let's do that build and run. And we will we should have the. So we have a process return. So I think we have something or we have an error with our program. So let's try to debug this. So warning format as expects per out argument type of character. But argument to us type in that's basically because we need to add the. Square brackets there. So build and run. So there you go. We have now the output. There one other ones was a man named John. He was 35 years old. He really liked the name John, but did that like being 35. And of course, every time we can if you want to change something with this story. So for example, instead of John, we will say Michael. And we can change all to the age. Like 40 and then. Set that and then build and run. So as you can see here, we now have the updated story. So Michael and then for the years old. So the good thing about variable is that we can reuse this into our entire program. So we have every time we have changes here, all the variables or all the value. Should be reflected in our the rest on our program. So in our case, we have updated all the values for our story. Okay. So I think that's it for this tutorial guys. And in the next video, we're going to continue working on with variables because there's a lot to discuss with variables. And it is just the beginning. So see you in the next video.
----------------------------------------

ðŸ“Œ Position 1 - video-1746702150844-853787411.mp4
Hey what's up guys welcome back to our YouTube channel and welcome to this video. This is John from Programming Knowledge and in this video guys we're gonna talk about the scope of a variable. And of course we're going to talk about the operators in C and how we can use them. So let's go ahead and talk about the scope of a variable. So basically a scope is a region of the program and the scope of variable reference to the area of the program where the variables can be accessed after its declaration. So basically in the C program we have like three different scope or different location that we can declare our variables. So the first one is inside the function or a block. So we have the first one will be the local variable. Here we go. We can declare a variable inside our function. The second one will be the global variable. Okay and of course we can also declare a variable inside the function parameter. So function parameters. Okay so that's all the area that we can like declare the variables and set the values to it. So but basically we do have like only the two that is most common although we are most of the time setting the function parameters and declaring variables to it like almost every function. But yeah the most common way of you know declaring a variable is the local and global local and global variable. So again when we say global or local variable it is a a variable that is declared inside a particular function or a block of function. So a variables that are declared within the function block and can be used only within the function is called local variable. So this is how we can implement this in our C program. So for example in here we're going to declare. But anyway guys this is a comment and the way to make comment in C program is by using the double slash. So this means this is a single line comment and of course we do have the slash and then the asteris and then asteris and then forward slash. So this is multi-line comment. So we can like add comments in between these lines and this double slash will be the single line comment. Okay so I hope you get the idea of this comments and basically guys these comments will not be interpreted by our C program. Okay so as I've said we're going to discuss or we're going to declare a local variable here. Local variable definition and initialization. Initialization right there. I'm just going to remove this single line comment. Okay so the way to declare a variable in C is like in or this is the type of information that we want to save. So in and then for example the variable name is x and we can do it like this y and then z. So basically what we're doing here is declaring three variables of in type. Okay so this is the variable definition and of course we can initialize it by saying x equals to 10. Okay x equals to 10 and y equals x plus 5 and then we can also say z equals y y variable plus 1. Okay so that's how we can declare a variable and initialize the value into the variable. So this is the definition in x, y, z and then of course the actual initialization which is right here x equals to 10 y equals x plus 5 and then z equals y plus 1. Okay so of course you can always print this. So for example print, print f and then value of, as a for example, z equals percent d. Remember percent d is just the placeholder for our integer value. So the value of z equals the c variable. Okay and then save and of course you can compile and or build and run your c program. So let's try that. Okay so we need to add the same column at the end of the line to mark that it is ending in this particular line. So build and run and there you go the value of z equals 16 because we set the x equals to 10 and then dy equals to x plus 5 and of course z equals y plus 1 that will result to 16. Okay so that's how you declare and initialize a local variable. Now let's go on with the global variable or global scope of a variable. So variables that are declared outside of the function can and can be access inside the function is called global variables. So for example you want to declare a global variable all you have to do is before the main function. Okay right here we can declare the global variable. Okay and we can declare it like int age and then we have like the c me colon at the end of the declaration. Okay in age and then c me colon. So global variable initialization. So after the after defining a local variable the system or the compiler won't initialize the value or any value to our local variable. So we have to initialize it by by ourselves like this. So if you try to define the variables right here it won't have any initial or initial value. So we have to declare it like this x equals to 10 y equals x plus 5 z equals y plus 1 but global variables get initialized automatically by the computer or by the compiler and so for example if we declare the variable type as int then the initial default value will be 0. Okay remember you have to remember that. So the difference between global and local variable is whenever we declare the variable in our local scope it won't get any initial value. So we have to initialize it by ourselves but the global variable is initialized by default depending on the type of value that we have saved in our variables. So for example int then it will default or initial default value will be 0 and if char so for example char t so the default value will be single code and then box slash 0 and then box slash I'm in single code. Of course when we say float, float m so the initial value of that is equal to 0 when we say double the initial value of that is also 0 and when we say pointer the initial value of this is equal to null. Okay so you have to remember that whenever you declare a global variable there is a default value for our variables. Okay so as I've said global variables can be accessed inside our main function or any function so because this is a global variable, right? Okay so I think that's all there is to it for this video guys and if you want to learn more about C programming language so make sure to watch the next video and that's it. Thank you for watching and see you in the next video.
----------------------------------------

